enum ReserveType {
  KYBER_RESERVE
  ORDERBOOK_RESERVE
}

type FullTrade @entity {
  "This entity represents the full trade at the network level. It involves multiple trades at the reserve level"
  id: ID!
  trader: User!

  "Source token"
  src: Token!

  "Destination token"
  dest: Token!

  "Source token amount in wei"
  rawSrcAmount: BigInt!

  "Destination token amount in wei"
  rawDestAmount: BigInt!

  "Source token amount converted to base units"
  actualSrcAmount: BigDecimal!

  "Destination token amount converted to base units"
  actualDestAmount: BigDecimal!

  "Reserve used to trade source token to ETH"
  reserveSrcToEth: Reserve

  "Reserve used to trade ETH to destination token"
  reserveEthToDest: Reserve

  "Value of the trade represented in wei (ETH)"
  ethWeiValue: BigInt

  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!
}

type User @entity {
  "This entity represents a user address which has participated either by trading or by placing orders"
  id: ID!

  "Trades by user"
  trades: [FullTrade!]! @derivedFrom(field: "trader")

  "Orders created by the user"
  orders: [Order!]! @derivedFrom(field: "creator")
}

type Reserve @entity {
  "This entity represents a Reserve. It can be either a normal reserve or an orderbook reserve."
  id: ID!

  "Type of said reserve. It will be null until it can be corraborated by a trade or any unique transaction"
  type: String

  "Depicts whether the reserve was added permissionlessly"
  isPermissionless: Boolean!

  "Depicts if the reserve was removed"
  isRemoved: Boolean!

  "Depicts if the reserve is enabled for trading"
  isTradeEnabled: Boolean!

  "Network on which this reserve is added"
  network: Network!

  "Trades through this reserve"
  trades: [ReserveTrade!]! @derivedFrom(field: "reserve")

  "Exchange rate contract (if applicable)"
  rateContract: String

  "Sanity rate contract (if applicable)"
  sanityContract: String

  "Reserve balances"
  tokenBalances: [ReserveTokenBalance!] @derivedFrom(field: "reserve")

  "Orders for this reserve. Only ORDERBOOK_RESERVE will have orders."
  orders: [Order!] @derivedFrom(field: "reserve")

  "Reserve trading pairs"
  tradingPairs: [TradingPair!]! @derivedFrom(field: "reserve")

  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!
}

type Order @entity {
  "This entity represents a placed order on an orderbook reserve"
  id: ID!

  "Whether this order was cancelled by the creator or not"
  isCancelled: Boolean!

  "Whether this order is removed because it was already completed"
  isRemoved: Boolean!

  reserve: Reserve!

  "Amount of source tokens offered"
  srcAmount: BigInt

  "Amount of destination tokens expected"
  destAmount: BigInt

  "Boolean to specify is whether this order expects ETH or a Token"
  isEthToToken: Boolean

  "User that created this order"
  creator: User!

  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!
}

type Network @entity {
  "This entity represents a KyberNetwork contract which holds all it's corresponding reserves and the proxy contract address if it is proxied"
  id: ID!
  proxy: String
  isCurrentNetwork: Boolean!
  isEnabled: Boolean!

  "Reserves on this network"
  reserves: [Reserve!]! @derivedFrom(field: "network")
}

type ReserveTrade @entity {
  "This entity represents a single reserve trade. Multiple of these trades will be used to complete a FullTrade"
  id: ID!

  "Source token"
  src: Token!

  "Destination token"
  dest: Token!

  "Source token amount in wei"
  rawSrcAmount: BigInt!

  "Destination token amount in wei"
  rawDestAmount: BigInt!

  "Source token amount converted to base units"
  actualSrcAmount: BigDecimal!

  "Destination token amount converted to base units"
  actualDestAmount: BigDecimal!

  reserve: Reserve!
  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!
}

type TradingPair @entity {
  "This entity represents a trading pair listed for a specific reserve and whether or not the pair is enabled"
  id: ID!
  reserve: Reserve!

  "Source token"
  src: Token!

  "Destination token"
  dest: Token!

  isTradingPairEnabled: Boolean!
}

type Token @entity {
  "This entity represents an ERC20 token"
  id: ID!

  "Blockchain address of the ERC20token"
  address: Bytes

  "String which represents the name of said token"
  name: String!

  "Short string representing the symbol used for said token"
  symbol: String!

  decimals: Int!

  "Reserve balances of this token"
  reserveBalances: [ReserveTokenBalance!]! @derivedFrom(field: "token")
}

type ReserveTokenBalance @entity {
  id: ID!

  "Token amount (wei)"
  amount: BigInt!

  reserve: Reserve!
  token: Token!
}
