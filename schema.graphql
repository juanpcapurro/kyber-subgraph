enum ReserveType {
  KYBER_RESERVE
  ORDERBOOK_RESERVE
}

type FullTrade @entity {
  "This entity represents the full trade at the network level. It involves multiple trades at the reserve level"
  id: ID!
  trader: User!

  "Source token"
  src: Token!

  "Destination token"
  dest: Token!

  "Source token amount in wei"
  rawSrcAmount: BigInt!

  "Destination token amount in wei"
  rawDestAmount: BigInt!

  "Source token amount converted to base units"
  actualSrcAmount: BigDecimal!

  "Destination token amount converted to base units"
  actualDestAmount: BigDecimal!

  "Reserve used to trade source token to ETH"
  reserveSrcToEth: Reserve

  "Reserve used to trade ETH to destination token"
  reserveEthToDest: Reserve

  "Value of the trade represented in wei (ETH)"
  ethWeiValue: BigInt

  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!
}

type User @entity {
  "This entity represents a user address which has participated either by trading or by placing orders"
  id: ID!

  "Trades by user"
  trades: [FullTrade!]! @derivedFrom(field: "trader")

  "Orders created by the user"
  orders: [Order!]! @derivedFrom(field: "creator")
}

type Reserve @entity {
  "This entity represents a Reserve. It can be either a normal reserve or an orderbook reserve."
  id: ID!

  "Type of said reserve. It will be null until it can be corraborated by a trade or any unique transaction"
  type: String

  "Depicts whether the reserve was added permissionlessly"
  isPermissionless: Boolean!

  "Depicts if the reserve was removed"
  isRemoved: Boolean!

  "Depicts if the reserve is enabled for trading"
  isTradeEnabled: Boolean!

  "Network on which this reserve is added"
  network: Network!

  "Trades through this reserve"
  trades: [ReserveTrade!]! @derivedFrom(field: "reserve")

  "Exchange rate contract (if applicable)"
  rateContract: String

  "Sanity rate contract (if applicable)"
  sanityContract: String

  "Orders for this reserve. Only ORDERBOOK_RESERVE will have orders."
  orders: [Order!] @derivedFrom(field: "reserve")

  "Reserve trading pairs"
  tradingPairs: [TradingPair!]! @derivedFrom(field: "reserve")

  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!

  "Amount of trades done through this reserve"
  tradesAmount: BigInt!
}

type Order @entity {
  "This entity represents a placed order on an orderbook reserve"
  id: ID!

  "Whether this order was cancelled by the creator or not"
  isCancelled: Boolean!

  "Whether this order is removed because it was already completed"
  isRemoved: Boolean!

  reserve: Reserve!

  "Amount of source tokens offered"
  srcAmount: BigInt

  "Amount of destination tokens expected"
  destAmount: BigInt

  "Boolean to specify is whether this order expects ETH or a Token"
  isEthToToken: Boolean

  "User that created this order"
  creator: User!

  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!
}

type Network @entity {
  "This entity represents a KyberNetwork contract which holds all it's corresponding reserves and the proxy contract address if it is proxied"
  id: ID!
  proxy: String
  isCurrentNetwork: Boolean!
  isEnabled: Boolean!

  "Reserves on this network"
  reserves: [Reserve!]! @derivedFrom(field: "network")

  "Amount of reserves (any type) currently on this network"
  reservesAmount: BigInt!

  "Amount of permissionless reserves currently on this network"
  permissionlessReservesAmount: BigInt!

  "Total amount of trades done trough this network"
  tradesAmount: BigInt!

  "List of network-level 'volume of trade' for each token on the network"
  tokenTradeVolume: [NetworkTradeVolume!]! @derivedFrom(field:"network")
}

type ReserveTrade @entity {
  "This entity represents a single reserve trade. Multiple of these trades will be used to complete a FullTrade"
  id: ID!

  "Source token"
  src: Token!

  "Destination token"
  dest: Token!

  "Source token amount in wei"
  rawSrcAmount: BigInt!

  "Destination token amount in wei"
  rawDestAmount: BigInt!

  "Source token amount converted to base units"
  actualSrcAmount: BigDecimal!

  "Destination token amount converted to base units"
  actualDestAmount: BigDecimal!

  reserve: Reserve!
  createdAtBlockTimestamp: BigInt!
  createdAtBlockNumber: BigInt!
  createdAtLogIndex: BigInt!
  createdAtTransactionHash: String!
}

type TradingPair @entity {
  "This entity represents a trading pair listed for a specific reserve and the status of said trading pair"
  id: ID!
  reserve: Reserve!

  "Source token"
  src: Token!

  "Destination token"
  dest: Token!

  isTradingPairEnabled: Boolean!
}

type Token @entity {
  "This entity represents an ERC20 token"
  id: ID!

  "Blockchain address of the ERC20token"
  address: Bytes

  "String which represents the name of said token"
  name: String!

  "Short string representing the symbol used for said token"
  symbol: String!

  decimals: Int!

  "List of volume of trade for different networks"
  networkTradeVolumes: [NetworkTradeVolume!]! @derivedFrom(field: "token")

  "List of volume of trade for different reserves"
  reserveTradeVolumes: [ReserveTradeVolume!]! @derivedFrom(field: "token")

  "List of volume of trade for different reserves"
  totalTradeVolume: [TotalTradeVolume!]! @derivedFrom(field: "token")
}

type NetworkTradeVolume @entity {
  "This entity represents the volume of trade of a certain token within a whole network. The ID for each token trade volume is '<NETWORK-ID>-<TOKEN-ADDRESS>'"
  id: ID!

  network: Network!

  token: Token!

  "Total volume traded. Includes sold and bought. Expressed in the minimal unit for the token"
  rawTotalVolume: BigInt!

  "Volume of tokens sold to the network. Expressed in the minimal unit for the token"
  rawAmountSold: BigInt!

  "Volume of tokens bought from the network. Expressed in the minimal unit for the token"
  rawAmountBought: BigInt!

  "Normalized value of rawTotalVolume so it's expressed in the base unit of the token"
  actualTotalVolume: BigDecimal!

  "Normalized value of rawAmountSoldToNetwork so it's expressed in the base unit of the token"
  actualAmountSold: BigDecimal!

  "Normalized value of rawAmountBoughtFromNetwork so it's expressed in the base unit of the token"
  actualAmountBought: BigDecimal!
}

type ReserveTradeVolume @entity {
  "This entity represents the volume of trade of a certain token within a whole reserve. The ID for each token trade volume is '<RESERVE-ID>-<TOKEN-ADDRESS>'"
  id: ID!

  reserve: Reserve!

  token: Token!

  "Total volume traded. Includes sold and bought. Expressed in the minimal unit for the token"
  rawTotalVolume: BigInt!

  "Volume of tokens sold to the reserve. Expressed in the minimal unit for the token"
  rawAmountSold: BigInt!

  "Volume of tokens bought from the reserve. Expressed in the minimal unit for the token"
  rawAmountBought: BigInt!

  "Normalized value of rawTotalVolume so it's expressed in the base unit of the token"
  actualTotalVolume: BigDecimal!

  "Normalized value of rawAmountSold so it's expressed in the base unit of the token"
  actualAmountSold: BigDecimal!

  "Normalized value of rawAmountBought so it's expressed in the base unit of the token"
  actualAmountBought: BigDecimal!
}

type TotalTradeVolume @entity {
  "This entity represents the volume of trade of a certain token within the entire Kyber Network. The ID for each token trade volume is '<TOKEN-ADDRESS>'"
  id: ID!

  token: Token!

  "Total volume traded. Includes sold and bought. Expressed in the minimal unit for the token"
  rawTotalVolume: BigInt!

  "Volume of tokens sold to the reserve. Expressed in the minimal unit for the token"
  rawAmountSold: BigInt!

  "Volume of tokens bought from the reserve. Expressed in the minimal unit for the token"
  rawAmountBought: BigInt!

  "Normalized value of rawTotalVolume so it's expressed in the base unit of the token"
  actualTotalVolume: BigDecimal!

  "Normalized value of rawAmountSold so it's expressed in the base unit of the token"
  actualAmountSold: BigDecimal!

  "Normalized value of rawAmountBought so it's expressed in the base unit of the token"
  actualAmountBought: BigDecimal!
}
